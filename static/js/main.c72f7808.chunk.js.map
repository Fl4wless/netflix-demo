{"version":3,"sources":["axios.js","requests.js","Banner.js","Row.js","Screens/HomeScreen.js","firebase.js","Screens/SignUpScreen.js","Screens/LoginScreen.js","features/userSlice.js","Screens/PlanScreen.js","Screens/ProfileScreen.js","Navbar.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","process","requests","fetchTrending","fetchNexflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","Banner","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","string","n","className","style","backgroundImage","backdrop_path","backgroundSize","backgroundPosition","title","name","original_title","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","src","alt","id","HomeScreen","firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","SignUpScreen","emailRef","useRef","passwordRef","placeholder","type","ref","onClick","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","handleSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlanScreen","products","setProducts","currentUser","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","window","location","origin","cancel_url","onSnapshot","snap","url","assign","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","toLowerCase","includes","buttonColor","description","backgroundColor","ProfileScreen","email","signOut","Navbar","show","setShow","transitionNavbar","scrollY","addEventListener","removeEventListener","to","App","dispatch","useDispatch","onAuthStateChanged","path","exact","store","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c72f7808.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNexflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const request = await axios.get(requests.fetchTrending);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const truncate = (string, n) => {\r\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_title}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n          {truncate(`${movie?.overview}`, 150)}\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Row.css\";\r\nimport axios from \"./axios\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow = false }) => {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    };\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map(\r\n          (movie) =>\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              <img\r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                key={movie.id}\r\n                src={`${baseUrl}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt=\"movie\"\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport Banner from \"../Banner\";\r\nimport \"./HomeScreen.css\";\r\nimport requests from \"../requests\";\r\nimport Row from \"../Row\";\r\n\r\nconst HomeScreen = () => {\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      <Banner />\r\n\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNexflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} isLargeRow />\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row\r\n        title=\"Horror Movis\"\r\n        fetchUrl={requests.fetchHorrorMovies}\r\n        isLargeRow\r\n      />\r\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanticMovies} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREABSE_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { auth, db };\r\n","import React, { useRef } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport \"./SignUpScreen.css\";\r\n\r\nconst SignUpScreen = () => {\r\n  const emailRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const registerUser = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .signInWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"signUpScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input placeholder=\"Email\" type=\"email\" ref={emailRef} />\r\n        <input placeholder=\"Password\" type=\"password\" ref={passwordRef} />\r\n        <button type=\"submit\" onClick={signIn}>\r\n          Sign In\r\n        </button>\r\n        <h4>\r\n          <span className=\"signUpScreen__gray\">New to Netflix? </span>\r\n          <span className=\"signUpScreen__link\" onClick={registerUser}>\r\n            Sign up now.\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpScreen;\r\n","import React, { useState } from \"react\";\r\nimport \"./LoginScreen.css\";\r\nimport SignUpScreen from \"./SignUpScreen\";\r\n\r\nfunction LoginScreen() {\r\n  const [signIn, setSignIn] = useState(false);\r\n\r\n  const handleSignIn = () => {\r\n    setSignIn(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"loginScreen\">\r\n      <div className=\"loginScreen__background\">\r\n        <img\r\n          className=\"loginScreen__logo\"\r\n          src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\r\n          alt=\"logo\"\r\n        />\r\n        <button className=\"loginScreen__button\" onClick={handleSignIn}>\r\n          Sign In\r\n        </button>\r\n        <div className=\"loginScreen__gradient\"></div>\r\n        <div className=\"loginScreen__body\">\r\n          {signIn ? (\r\n            <SignUpScreen />\r\n          ) : (\r\n            <>\r\n              <h1>Unlimited films, TV programmes and more.</h1>\r\n              <h2>Watch anywhere. Cancel at any time.</h2>\r\n              <h3>\r\n                Ready to watch? Enter your email to create or restart your\r\n                membership.\r\n              </h3>\r\n              <div className=\"loginScreen__input\">\r\n                <form>\r\n                  <input type=\"email\" placeholder=\"Email Adress\" />\r\n                  <button\r\n                    className=\"loginScreen__getStarted\"\r\n                    onClick={handleSignIn}\r\n                  >\r\n                    GET STARTED\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  user: null,\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { db } from \"../firebase\";\r\nimport \"./PlanScreen.css\";\r\n\r\nconst PlanScreen = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const currentUser = useSelector(selectUser);\r\n  const [subscription, setSubscription] = useState(null);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"customers\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"subscriptions\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach(async (subscription) => {\r\n          setSubscription({\r\n            role: subscription.data().role,\r\n            current_period_end: subscription.data().current_period_end.seconds,\r\n            current_period_start:\r\n              subscription.data().current_period_start.seconds,\r\n          });\r\n        });\r\n      });\r\n  }, [currentUser.uid]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"products\")\r\n      .where(\"active\", \"==\", true)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const products = {};\r\n        querySnapshot.forEach(async (productDoc) => {\r\n          products[productDoc.id] = productDoc.data();\r\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\r\n          priceSnap.docs.forEach((price) => {\r\n            products[productDoc.id].prices = {\r\n              priceId: price.id,\r\n              priceData: price.data(),\r\n            };\r\n          });\r\n        });\r\n        setProducts(products);\r\n      });\r\n  }, []);\r\n\r\n  const loadCheckout = async (priceId) => {\r\n    const docRef = await db\r\n      .collection(\"customers\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"checkout_sessions\")\r\n      .add({\r\n        price: priceId,\r\n        success_url: window.location.origin,\r\n        cancel_url: window.location.origin,\r\n      });\r\n    // Wait for the CheckoutSession to get attached by the extension\r\n    docRef.onSnapshot((snap) => {\r\n      const { error, url } = snap.data();\r\n      if (error) {\r\n        // Show an error to your customer and\r\n        // inspect your Cloud Function logs in the Firebase console.\r\n        alert(`An error occured: ${error.message}`);\r\n      }\r\n      if (url) {\r\n        // We have a Stripe Checkout URL, let's redirect.\r\n        window.location.assign(url);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"planScreen\">\r\n      {subscription && (\r\n        <Fragment>\r\n          <h4>Plans (Current Plan: {subscription?.role})</h4>\r\n          <p>\r\n            Renewal date:{\" \"}\r\n            {new Date(\r\n              subscription.current_period_start * 1000\r\n            ).toLocaleDateString()}\r\n          </p>\r\n        </Fragment>\r\n      )}\r\n\r\n      {Object.entries(products).map(([productId, productData]) => {\r\n        const isCurrentPackage = productData.name\r\n          ?.toLowerCase()\r\n          .includes(subscription?.role);\r\n        const buttonColor = isCurrentPackage && \"gray\";\r\n\r\n        return (\r\n          <div className=\"profileScreen__singlePlan\" key={productId}>\r\n            <p>\r\n              {productData.name}\r\n              <span>{productData.description}</span>\r\n            </p>\r\n            <button\r\n              className=\"profileScreen__planButton\"\r\n              onClick={() => loadCheckout(productData.prices.priceId)}\r\n              style={{ backgroundColor: buttonColor }}\r\n            >\r\n              {isCurrentPackage ? \"Current Package\" : \"Subscribe\"}\r\n            </button>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlanScreen;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { auth } from \"../firebase\";\r\nimport PlanScreen from \"./PlanScreen\";\r\nimport \"./ProfileScreen.css\";\r\n\r\nconst ProfileScreen = () => {\r\n  const user = useSelector(selectUser);\r\n\r\n  const logoutHandler = () => {\r\n    auth.signOut();\r\n  };\r\n\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <div className=\"profileScreen__body\">\r\n        <h1>Edit Profile</h1>\r\n        <div className=\"profileScreen__info\">\r\n          <img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            alt=\"avatar\"\r\n          />\r\n          <div className=\"profileScreen__profile\">\r\n            <h2>{user.email}</h2>\r\n            <div className=\"profileScreen__plans\">\r\n              <PlanScreen />\r\n\r\n              <button\r\n                onClick={logoutHandler}\r\n                className=\"profileScreen__signOut\"\r\n              >\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const transitionNavbar = () => {\r\n    if (window.scrollY > 100) {\r\n      setShow(true);\r\n    } else {\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavbar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavbar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <div className=\"nav__content\">\r\n        <Link to=\"/\">\r\n          <img\r\n            className=\"nav__logo\"\r\n            src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-4-1.png\"\r\n            alt=\"netflix\"\r\n          />\r\n        </Link>\r\n        <Link to=\"/profile\">\r\n          <img\r\n            className=\"nav__avatar\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            alt=\"avatar\"\r\n          />\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport HomeScreen from \"./Screens/HomeScreen\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LoginScreen from \"./Screens/LoginScreen\";\nimport { auth } from \"./firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport ProfileScreen from \"./Screens/ProfileScreen\";\nimport Navbar from \"./Navbar\";\nimport { Fragment } from \"react\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(\n          login({\n            uid: authUser.uid,\n            email: authUser.email,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Fragment>\n            <Navbar />\n            <Switch>\n              <Route path=\"/profile\" exact>\n                <ProfileScreen />\n              </Route>\n              <Route path=\"/\" exact>\n                <HomeScreen />\n              </Route>\n            </Switch>\n          </Fragment>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}